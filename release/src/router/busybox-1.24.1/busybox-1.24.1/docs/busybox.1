.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2020-01-20" "version 1.24.1" "busybox"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX. CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX.\s0
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 10
\&        [, [[, add\-shell, arp, arping, ash, awk, base64, basename, bash,
\&        blkid, blockdev, cat, chmod, chown, chpasswd, chrt, clear, cmp, cp,
\&        crond, cut, date, dd, depmod, df, dirname, dmesg, du, echo, egrep,
\&        env, ether\-wake, expr, false, fatattr, fdisk, fgrep, find,
\&        flash_eraseall, flock, free, fsck, fsck.minix, fstrim, fsync,
\&        ftpget, grep, gunzip, gzip, halt, head, ifconfig, insmod, ionice,
\&        kill, killall, klogd, less, ln, logger, login, logread, ls, lsmod,
\&        lsusb, md5sum, mdev, mkdir, mknod, mkswap, modprobe, more, mount,
\&        mv, nc, netstat, nice, nohup, nslookup, pidof, ping, ping6,
\&        poweroff, printf, ps, pwd, pwdx, readlink, reboot, remove\-shell,
\&        renice, rm, rmdir, rmmod, route, sed, setconsole, sh, sleep,
\&        smemcap, sort, split, start\-stop\-daemon, strings, stty, swapoff,
\&        swapon, sync, syslogd, tail, tar, taskset, telnetd, test, tftp,
\&        tftpd, top, touch, tr, traceroute, traceroute6, true, tty, udhcpc,
\&        umount, uname, uniq, unzip, uptime, usleep, vconfig, vi, watch, wc,
\&        which, xargs, zcat, zcip
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBadd-shell\fR" 4
.IX Item "add-shell"
add-shell \s-1SHELL...\s0
.Sp
Add SHELLs to /etc/shells
.IP "\fBarp\fR" 4
.IX Item "arp"
arp 
[\-vn]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-a [\s-1HOSTNAME\s0]
[\-v]		    [\-i \s-1IF\s0] \-d \s-1HOSTNAME\s0 [pub]
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-s \s-1HOSTNAME HWADDR\s0 [temp]
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-s \s-1HOSTNAME HWADDR\s0 [netmask \s-1MASK\s0] pub
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-Ds \s-1HOSTNAME IFACE\s0 [netmask \s-1MASK\s0] pub
.Sp
Manipulate \s-1ARP\s0 cache
.Sp
.Vb 9
\&        \-a              Display (all) hosts
\&        \-d              Delete ARP entry
\&        \-s              Set new entry
\&        \-v              Verbose
\&        \-n              Don\*(Aqt resolve names
\&        \-i IF           Network interface
\&        \-D              Read HWADDR from IFACE
\&        \-A,\-p AF        Protocol family
\&        \-H HWTYPE       Hardware address type
.Ve
.IP "\fBarping\fR" 4
.IX Item "arping"
arping [\-fqbDUA] [\-c \s-1CNT\s0] [\-w \s-1TIMEOUT\s0] [\-I \s-1IFACE\s0] [\-s \s-1SRC_IP\s0] \s-1DST_IP\s0
.Sp
Send \s-1ARP\s0 requests/replies
.Sp
.Vb 11
\&        \-f              Quit on first ARP reply
\&        \-q              Quiet
\&        \-b              Keep broadcasting, don\*(Aqt go unicast
\&        \-D              Exit with 1 if DST_IP replies
\&        \-U              Unsolicited ARP mode, update your neighbors
\&        \-A              ARP answer mode, update your neighbors
\&        \-c N            Stop after sending N ARP requests
\&        \-w TIMEOUT      Seconds to wait for ARP reply
\&        \-I IFACE        Interface to use (default eth0)
\&        \-s SRC_IP       Sender IP address
\&        DST_IP          Target IP address
.Ve
.IP "\fBash\fR" 4
.IX Item "ash"
ash [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBawk\fR" 4
.IX Item "awk"
awk [\s-1OPTIONS\s0] [\s-1AWK_PROGRAM\s0] [\s-1FILE\s0]...
.Sp
.Vb 3
\&        \-v VAR=VAL      Set variable
\&        \-F SEP          Use SEP as field separator
\&        \-f FILE         Read program from FILE
.Ve
.IP "\fBbase64\fR" 4
.IX Item "base64"
base64 [\-d] [\s-1FILE\s0]
.Sp
Base64 encode or decode \s-1FILE\s0 to standard output
	\-d	Decode data
.IP "\fBbasename\fR" 4
.IX Item "basename"
basename \s-1FILE\s0 [\s-1SUFFIX\s0]
.Sp
Strip directory path and .SUFFIX from \s-1FILE\s0
.IP "\fBbash\fR" 4
.IX Item "bash"
bash [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBblkid\fR" 4
.IX Item "blkid"
blkid [\s-1BLOCKDEV\s0]...
.Sp
Print UUIDs of all filesystems
.IP "\fBblockdev\fR" 4
.IX Item "blockdev"
blockdev \s-1OPTION BLOCKDEV\s0
.Sp
.Vb 10
\&        \-\-setro         Set ro
\&        \-\-setrw         Set rw
\&        \-\-getro         Get ro
\&        \-\-getss         Get sector size
\&        \-\-getbsz        Get block size
\&        \-\-setbsz BYTES  Set block size
\&        \-\-getsz         Get device size in 512\-byte sectors
\&        \-\-getsize64     Get device size in bytes
\&        \-\-flushbufs     Flush buffers
\&        \-\-rereadpt      Reread partition table
.Ve
.IP "\fBcat\fR" 4
.IX Item "cat"
cat [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them to stdout
.IP "\fBchmod\fR" 4
.IX Item "chmod"
chmod [\-R] MODE[,MODE]... \s-1FILE...\s0
.Sp
Each \s-1MODE\s0 is one or more of the letters ugoa, one of the
symbols +\-= and one or more of the letters rwxst
.Sp
.Vb 1
\&        \-R      Recurse
.Ve
.IP "\fBchown\fR" 4
.IX Item "chown"
chown [\-Rh]... OWNER[<.|:>[\s-1GROUP\s0]] \s-1FILE...\s0
.Sp
Change the owner and/or group of each \s-1FILE\s0 to \s-1OWNER\s0 and/or \s-1GROUP\s0
.Sp
.Vb 2
\&        \-R      Recurse
\&        \-h      Affect symlinks instead of symlink targets
.Ve
.IP "\fBchpasswd\fR" 4
.IX Item "chpasswd"
chpasswd [\-\-md5|\-\-encrypted]
.Sp
Read user:password from stdin and update /etc/passwd
.Sp
.Vb 2
\&        \-e,\-\-encrypted  Supplied passwords are in encrypted form
\&        \-m,\-\-md5        Use MD5 encryption instead of DES
.Ve
.IP "\fBchrt\fR" 4
.IX Item "chrt"
chrt [\-prfom] [\s-1PRIO\s0] [\s-1PID\s0 | \s-1PROG ARGS\s0]
.Sp
Change scheduling priority and class for a process
.Sp
.Vb 5
\&        \-p      Operate on PID
\&        \-r      Set SCHED_RR class
\&        \-f      Set SCHED_FIFO class
\&        \-o      Set SCHED_OTHER class
\&        \-m      Show min/max priorities
.Ve
.IP "\fBclear\fR" 4
.IX Item "clear"
clear
.Sp
Clear screen
.IP "\fBcmp\fR" 4
.IX Item "cmp"
cmp [\-l] [\-s] \s-1FILE1\s0 [\s-1FILE2\s0]
.Sp
Compare \s-1FILE1\s0 with \s-1FILE2\s0 (or stdin)
.Sp
.Vb 3
\&        \-l      Write the byte numbers (decimal) and values (octal)
\&                for all differing bytes
\&        \-s      Quiet
.Ve
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\s-1OPTIONS\s0] \s-1SOURCE... DEST\s0
.Sp
Copy \s-1SOURCE\s0(s) to \s-1DEST\s0
.Sp
.Vb 9
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Overwrite
\&        \-i      Prompt before overwrite
\&        \-l,\-s   Create (sym)links
.Ve
.IP "\fBcrond\fR" 4
.IX Item "crond"
crond \-fbS \-l N \-L \s-1LOGFILE\s0 \-c \s-1DIR\s0
.Sp
.Vb 6
\&        \-f      Foreground
\&        \-b      Background (default)
\&        \-S      Log to syslog (default)
\&        \-l N    Set log level. Most verbose:0, default:8
\&        \-L FILE Log to FILE
\&        \-c DIR  Cron dir. Default:/var/spool/cron/crontabs
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from each input \s-1FILE\s0 to stdout
.Sp
.Vb 6
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d CHAR Use CHAR instead of tab as the field delimiter
\&        \-s      Output only the lines containing delimiter
\&        \-f N    Print only these fields
\&        \-n      Ignored
.Ve
.IP "\fBdate\fR" 4
.IX Item "date"
date [\s-1OPTIONS\s0] [+FMT] [\s-1TIME\s0]
.Sp
Display time (using +FMT), or set time
.Sp
.Vb 10
\&        [\-s,\-\-set] TIME Set time to TIME
\&        \-u,\-\-utc        Work in UTC (don\*(Aqt convert to local time)
\&        \-R,\-\-rfc\-2822   Output RFC\-2822 compliant date string
\&        \-I[SPEC]        Output ISO\-8601 compliant date string
\&                        SPEC=\*(Aqdate\*(Aq (default) for date only,
\&                        \*(Aqhours\*(Aq, \*(Aqminutes\*(Aq, or \*(Aqseconds\*(Aq for date and
\&                        time to the indicated precision
\&        \-r,\-\-reference FILE     Display last modification time of FILE
\&        \-d,\-\-date TIME  Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          Use FMT for \-d TIME conversion
.Ve
.Sp
Recognized \s-1TIME\s0 formats:
.Sp
.Vb 5
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
\&        \*(Aqdate TIME\*(Aq form accepts MMDDhhmm[[YY]YY][.ss] instead
.Ve
.IP "\fBdd\fR" 4
.IX Item "dd"
dd [if=FILE] [of=FILE] [ibs=N] [obs=N] [bs=N] [count=N] [skip=N]
	[seek=N] [conv=notrunc|noerror|sync|fsync]
.Sp
Copy a file with converting and formatting
.Sp
.Vb 10
\&        if=FILE         Read from FILE instead of stdin
\&        of=FILE         Write to FILE instead of stdout
\&        bs=N            Read and write N bytes at a time
\&        ibs=N           Read N bytes at a time
\&        obs=N           Write N bytes at a time
\&        count=N         Copy only N input blocks
\&        skip=N          Skip N input blocks
\&        seek=N          Skip N output blocks
\&        conv=notrunc    Don\*(Aqt truncate output file
\&        conv=noerror    Continue after read errors
\&        conv=sync       Pad blocks with zeros
\&        conv=fsync      Physically write data out before finishing
\&        conv=swab       Swap every pair of bytes
.Ve
.Sp
N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), \s-1MB, M, GB, G\s0
.IP "\fBdepmod\fR" 4
.IX Item "depmod"
depmod [\-n] [\-b \s-1BASE\s0] [\s-1VERSION\s0] [\s-1MODFILES\s0]...
.Sp
Generate modules.dep, alias, and symbols files
.Sp
.Vb 2
\&        \-b BASE Use BASE/lib/modules/VERSION
\&        \-n      Dry run: print files to stdout
.Ve
.IP "\fBdf\fR" 4
.IX Item "df"
df [\-PkmhT] [\s-1FILESYSTEM\s0]...
.Sp
Print filesystem usage statistics
.Sp
.Vb 5
\&        \-P      POSIX output format
\&        \-k      1024\-byte blocks (default)
\&        \-m      1M\-byte blocks
\&        \-h      Human readable (e.g. 1K 243M 2G)
\&        \-T      Print filesystem type
.Ve
.IP "\fBdirname\fR" 4
.IX Item "dirname"
dirname \s-1FILENAME\s0
.Sp
Strip non-directory suffix from \s-1FILENAME\s0
.IP "\fBdmesg\fR" 4
.IX Item "dmesg"
dmesg [\-c] [\-n \s-1LEVEL\s0] [\-s \s-1SIZE\s0]
.Sp
Print or control the kernel ring buffer
.Sp
.Vb 4
\&        \-c              Clear ring buffer after printing
\&        \-n LEVEL        Set console logging level
\&        \-s SIZE         Buffer size
\&        \-r              Print raw message buffer
.Ve
.IP "\fBdu\fR" 4
.IX Item "du"
du [\-aHLdclsxhmk] [\s-1FILE\s0]...
.Sp
Summarize disk space used for each \s-1FILE\s0 and/or directory
.Sp
.Vb 11
\&        \-a      Show file sizes too
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-d N    Limit output to directories (and files with \-a) of depth < N
\&        \-c      Show grand total
\&        \-l      Count sizes many times if hard linked
\&        \-s      Display only a total for each argument
\&        \-x      Skip directories on different filesystems
\&        \-h      Sizes in human readable format (e.g., 1K 243M 2G)
\&        \-m      Sizes in megabytes
\&        \-k      Sizes in kilobytes (default)
.Ve
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0]...
.Sp
Print the specified ARGs to stdout
.Sp
.Vb 3
\&        \-n      Suppress trailing newline
\&        \-e      Interpret backslash escapes (i.e., \et=tab)
\&        \-E      Don\*(Aqt interpret backslash escapes (default)
.Ve
.IP "\fBenv\fR" 4
.IX Item "env"
env [\-iu] [\-] [name=value]... [\s-1PROG ARGS\s0]
.Sp
Print the current environment or run \s-1PROG\s0 after setting up
the specified environment
.Sp
.Vb 2
\&        \-, \-i   Start with an empty environment
\&        \-u      Remove variable from the environment
.Ve
.IP "\fBether-wake\fR" 4
.IX Item "ether-wake"
ether-wake [\-b] [\-i \s-1IFACE\s0] [\-p aa:bb:cc:dd[:ee:ff]/a.b.c.d] \s-1MAC\s0
.Sp
Send a magic packet to wake up sleeping machines.
\&\s-1MAC\s0 must be a station address (00:11:22:33:44:55) or
a hostname with a known 'ethers' entry.
.Sp
.Vb 3
\&        \-b              Broadcast the packet
\&        \-i IFACE        Interface to use (default eth0)
\&        \-p PASSWORD     Append four or six byte PASSWORD to the packet
.Ve
.IP "\fBexpr\fR" 4
.IX Item "expr"
expr \s-1EXPRESSION\s0
.Sp
Print the value of \s-1EXPRESSION\s0 to stdout
.Sp
\&\s-1EXPRESSION\s0 may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LENGTH Substring of STRING, POS counted from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP "\fBfatattr\fR" 4
.IX Item "fatattr"
fatattr [\-+rhsvda] \s-1FILE...\s0
.Sp
Change file attributes on \s-1FAT\s0 filesystem
.Sp
.Vb 8
\&        \-       Clear attributes
\&        +       Set attributes
\&        r       Read only
\&        h       Hidden
\&        s       System
\&        v       Volume label
\&        d       Directory
\&        a       Archive
.Ve
.IP "\fBfdisk\fR" 4
.IX Item "fdisk"
fdisk [\-ul] [\-C \s-1CYLINDERS\s0] [\-H \s-1HEADS\s0] [\-S \s-1SECTORS\s0] [\-b \s-1SSZ\s0] \s-1DISK\s0
.Sp
Change partition table
.Sp
.Vb 6
\&        \-u              Start and End are in sectors (instead of cylinders)
\&        \-l              Show partition table for each DISK, then exit
\&        \-b 2048         (for certain MO disks) use 2048\-byte sectors
\&        \-C CYLINDERS    Set number of cylinders/heads/sectors
\&        \-H HEADS
\&        \-S SECTORS
.Ve
.IP "\fBfind\fR" 4
.IX Item "find"
find [\-HL] [\s-1PATH\s0]... [\s-1OPTIONS\s0] [\s-1ACTIONS\s0]
.Sp
Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: \s-1PATH\s0 is current directory, action is '\-print'
.Sp
.Vb 2
\&        \-L,\-follow      Follow symlinks
\&        \-H              ...on command line only
.Ve
.Sp
Actions:
.Sp
.Vb 10
\&        ! ACT           Invert ACT\*(Aqs success/failure
\&        ACT1 [\-a] ACT2  If ACT1 fails, stop, else do ACT2
\&        ACT1 \-o ACT2    If ACT1 succeeds, stop, else do ACT2
\&                        Note: \-a has higher priority than \-o
\&        \-name PATTERN   Match file name (w/o directory name) to PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&        \-mtime DAYS     mtime is greater than (+N), less than (\-N),
\&                        or exactly N days in the past
\&If none of the following actions is specified, \-print is assumed
\&        \-print          Print file name
\&        \-print0         Print file name, NUL terminated
\&        \-exec CMD ARG ; Run CMD with all instances of {} replaced by
\&                        file name. Fails if CMD exits with nonzero
.Ve
.IP "\fBflash_eraseall\fR" 4
.IX Item "flash_eraseall"
flash_eraseall [\-jNq] \s-1MTD_DEVICE\s0
.Sp
Erase an \s-1MTD\s0 device
.Sp
.Vb 3
\&        \-j      Format the device for jffs2
\&        \-N      Don\*(Aqt skip bad blocks
\&        \-q      Don\*(Aqt display progress messages
.Ve
.IP "\fBflock\fR" 4
.IX Item "flock"
flock [\-sxun] FD|{\s-1FILE\s0 [\-c] \s-1PROG ARGS\s0}
.Sp
[Un]lock file descriptor, or lock \s-1FILE,\s0 run \s-1PROG\s0
.Sp
.Vb 4
\&        \-s      Shared lock
\&        \-x      Exclusive lock (default)
\&        \-u      Unlock FD
\&        \-n      Fail rather than wait
.Ve
.IP "\fBfree\fR" 4
.IX Item "free"
free
.Sp
Display the amount of free and used system memory
.IP "\fBfsck\fR" 4
.IX Item "fsck"
fsck [\-ANPRTV] [\-C \s-1FD\s0] [\-t \s-1FSTYPE\s0] [\s-1FS_OPTS\s0] [\s-1BLOCKDEV\s0]...
.Sp
Check and repair filesystems
.Sp
.Vb 8
\&        \-A      Walk /etc/fstab and check all filesystems
\&        \-N      Don\*(Aqt execute, just show what would be done
\&        \-P      With \-A, check filesystems in parallel
\&        \-R      With \-A, skip the root filesystem
\&        \-T      Don\*(Aqt show title on startup
\&        \-V      Verbose
\&        \-C n    Write status information to specified filedescriptor
\&        \-t TYPE List of filesystem types to check
.Ve
.IP "\fBfsck.minix\fR" 4
.IX Item "fsck.minix"
fsck.minix [\-larvsmf] \s-1BLOCKDEV\s0
.Sp
Check \s-1MINIX\s0 filesystem
.Sp
.Vb 7
\&        \-l      List all filenames
\&        \-r      Perform interactive repairs
\&        \-a      Perform automatic repairs
\&        \-v      Verbose
\&        \-s      Output superblock information
\&        \-m      Show "mode not cleared" warnings
\&        \-f      Force file system check
.Ve
.IP "\fBfstrim\fR" 4
.IX Item "fstrim"
fstrim [\s-1OPTIONS\s0] \s-1MOUNTPOINT\s0
.Sp
.Vb 4
\&        \-o,\-\-offset=OFFSET      Offset in bytes to discard from
\&        \-l,\-\-length=LEN         Bytes to discard
\&        \-m,\-\-minimum=MIN        Minimum extent length
\&        \-v,\-\-verbose            Print number of discarded bytes
.Ve
.IP "\fBfsync\fR" 4
.IX Item "fsync"
fsync [\-d] \s-1FILE...\s0
.Sp
Write files' buffered blocks to disk
.Sp
.Vb 1
\&        \-d      Avoid syncing metadata
.Ve
.IP "\fBftpget\fR" 4
.IX Item "ftpget"
ftpget [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1LOCAL_FILE\s0] \s-1REMOTE_FILE\s0
.Sp
Download a file via \s-1FTP\s0
.Sp
.Vb 5
\&        \-c      Continue previous transfer
\&        \-v      Verbose
\&        \-u USER Username
\&        \-p PASS Password
\&        \-P NUM  Port
.Ve
.IP "\fBgrep\fR" 4
.IX Item "grep"
grep [\-HhnlLoqvsriwFE] [\-m N] [\-A/B/C N] PATTERN/\-e \s-1PATTERN..\s0./\-f \s-1FILE\s0 [\s-1FILE\s0]...
.Sp
Search for \s-1PATTERN\s0 in FILEs (or stdin)
.Sp
.Vb 10
\&        \-H      Add \*(Aqfilename:\*(Aq prefix
\&        \-h      Do not add \*(Aqfilename:\*(Aq prefix
\&        \-n      Add \*(Aqline_no:\*(Aq prefix
\&        \-l      Show only names of files that match
\&        \-L      Show only names of files that don\*(Aqt match
\&        \-c      Show only count of matching lines
\&        \-o      Show only the matching part of line
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress open and read errors
\&        \-r      Recurse
\&        \-i      Ignore case
\&        \-w      Match whole words only
\&        \-x      Match whole lines only
\&        \-F      PATTERN is a literal (not regexp)
\&        \-E      PATTERN is an extended regexp
\&        \-m N    Match up to N times per file
\&        \-A N    Print N lines of trailing context
\&        \-B N    Print N lines of leading context
\&        \-C N    Same as \*(Aq\-A N \-B N\*(Aq
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
.Ve
.IP "\fBgunzip\fR" 4
.IX Item "gunzip"
gunzip [\-cft] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 3
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-t      Test file integrity
.Ve
.IP "\fBgzip\fR" 4
.IX Item "gzip"
gzip [\-cfd] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin)
.Sp
.Vb 3
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBhalt\fR" 4
.IX Item "halt"
halt [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Halt the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBhead\fR" 4
.IX Item "head"
head [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of each \s-1FILE\s0 (or stdin) to stdout.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 5
\&        \-n N[kbm]       Print first N lines
\&        \-n \-N[kbm]      Print all except N last lines
\&        \-c [\-]N[kbm]    Print first N bytes
\&        \-q              Never print headers
\&        \-v              Always print headers
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
.IP "\fBifconfig\fR" 4
.IX Item "ifconfig"
ifconfig [\-a] interface [address]
.Sp
Configure a network interface
.Sp
.Vb 8
\&        [add ADDRESS[/PREFIXLEN]]
\&        [del ADDRESS[/PREFIXLEN]]
\&        [[\-]broadcast [ADDRESS]] [[\-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [hw ether ADDRESS] [metric NN] [mtu NN]
\&        [[\-]trailers] [[\-]arp] [[\-]allmulti]
\&        [multicast] [[\-]promisc] [txqueuelen NN] [[\-]dynamic]
\&        [up|down] ...
.Ve
.IP "\fBinsmod\fR" 4
.IX Item "insmod"
insmod \s-1FILE\s0 [SYMBOL=VALUE]...
.Sp
Load kernel module
.IP "\fBionice\fR" 4
.IX Item "ionice"
ionice [\-c 1\-3] [\-n 0\-7] [\-p \s-1PID\s0] [\s-1PROG\s0]
.Sp
Change I/O priority and class
.Sp
.Vb 2
\&        \-c      Class. 1:realtime 2:best\-effort 3:idle
\&        \-n      Priority
.Ve
.IP "\fBkill\fR" 4
.IX Item "kill"
kill [\-l] [\-SIG] \s-1PID...\s0
.Sp
Send a signal (default: \s-1TERM\s0) to given PIDs
.Sp
.Vb 1
\&        \-l      List all signal names and numbers
.Ve
.IP "\fBkillall\fR" 4
.IX Item "killall"
killall [\-l] [\-q] [\-SIG] \s-1PROCESS_NAME...\s0
.Sp
Send a signal (default: \s-1TERM\s0) to given processes
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-q      Don\*(Aqt complain if no processes were killed
.Ve
.IP "\fBklogd\fR" 4
.IX Item "klogd"
klogd [\-c N] [\-n]
.Sp
Kernel logger
.Sp
.Vb 2
\&        \-c N    Print to console messages more urgent than prio N (1\-8)
\&        \-n      Run in foreground
.Ve
.IP "\fBless\fR" 4
.IX Item "less"
less [\-ENh~] [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.Sp
.Vb 3
\&        \-E      Quit once the end of a file is reached
\&        \-N      Prefix line number to each line
\&        \-~      Suppress ~s displayed past EOF
.Ve
.IP "\fBln\fR" 4
.IX Item "ln"
ln [\s-1OPTIONS\s0] \s-1TARGET...\s0 LINK|DIR
.Sp
Create a link \s-1LINK\s0 or \s-1DIR/TARGET\s0 to the specified \s-1TARGET\s0(s)
.Sp
.Vb 7
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S suf  Use suffix instead of ~ when making backup files
\&        \-T      2nd arg must be a DIR
\&        \-v      Verbose
.Ve
.IP "\fBlogger\fR" 4
.IX Item "logger"
logger [\s-1OPTIONS\s0] [\s-1MESSAGE\s0]
.Sp
Write \s-1MESSAGE\s0 (or stdin) to syslog
.Sp
.Vb 3
\&        \-s      Log to stderr as well as the system log
\&        \-t TAG  Log using the specified tag (defaults to user name)
\&        \-p PRIO Priority (numeric or facility.level pair)
.Ve
.IP "\fBlogin\fR" 4
.IX Item "login"
login [\-p] [\-h \s-1HOST\s0] [[\-f] \s-1USER\s0]
.Sp
Begin a new session on the system
.Sp
.Vb 3
\&        \-f      Don\*(Aqt authenticate (user already authenticated)
\&        \-h      Name of the remote host
\&        \-p      Preserve environment
.Ve
.IP "\fBlogread\fR" 4
.IX Item "logread"
logread [\-fF]
.Sp
Show messages in syslogd's circular buffer
.Sp
.Vb 2
\&        \-f      Output data as log grows
\&        \-F      Same as \-f, but dump buffer first
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinsehrSXvctu] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
.Vb 10
\&        \-1      One column output
\&        \-a      Include entries which start with .
\&        \-A      Like \-a, but exclude . and ..
\&        \-C      List by columns
\&        \-x      List by lines
\&        \-d      List directory entries instead of contents
\&        \-L      Follow symlinks
\&        \-H      Follow symlinks on command line
\&        \-R      Recurse
\&        \-p      Append / to dir entries
\&        \-F      Append indicator (one of */=@|) to entries
\&        \-l      Long listing format
\&        \-i      List inode numbers
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-s      List allocated blocks
\&        \-e      List full date and time
\&        \-h      List sizes in human readable format (1K 243M 2G)
\&        \-r      Sort in reverse order
\&        \-S      Sort by size
\&        \-X      Sort by extension
\&        \-v      Sort by version
\&        \-c      With \-l: sort by ctime
\&        \-t      With \-l: sort by mtime
\&        \-u      With \-l: sort by atime
\&        \-w N    Assume the terminal is N columns wide
\&        \-\-color[={always,never,auto}]   Control coloring
.Ve
.IP "\fBlsmod\fR" 4
.IX Item "lsmod"
lsmod
.Sp
List the currently loaded kernel modules
.IP "\fBmd5sum\fR" 4
.IX Item "md5sum"
md5sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1MD5\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBmdev\fR" 4
.IX Item "mdev"
mdev [\-s]
.Sp
mdev \-s is to be run during boot to scan /sys and populate /dev.
.Sp
Bare mdev is a kernel hotplug helper. To activate it:
	echo /sbin/mdev >/proc/sys/kernel/hotplug
.Sp
If /dev/mdev.seq file exists, mdev will wait for its value
to match \f(CW$SEQNUM\fR variable. This prevents plug/unplug races.
To activate this feature, create empty /dev/mdev.seq at boot.
.Sp
If /dev/mdev.log file exists, debug log will be appended to it.
.IP "\fBmkdir\fR" 4
.IX Item "mkdir"
mkdir [\s-1OPTIONS\s0] \s-1DIRECTORY...\s0
.Sp
Create \s-1DIRECTORY\s0
.Sp
.Vb 2
\&        \-m MODE Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP "\fBmknod\fR" 4
.IX Item "mknod"
mknod [\-m \s-1MODE\s0] \s-1NAME TYPE MAJOR MINOR\s0
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        \-m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR and MINOR are ignored)
.Ve
.IP "\fBmkswap\fR" 4
.IX Item "mkswap"
mkswap [\-L \s-1LBL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Prepare \s-1BLOCKDEV\s0 to be used as swap partition
.Sp
.Vb 1
\&        \-L LBL  Label
.Ve
.IP "\fBmodprobe\fR" 4
.IX Item "modprobe"
modprobe [\-alrqvsD] \s-1MODULE\s0 [SYMBOL=VALUE]...
.Sp
.Vb 7
\&        \-a      Load multiple MODULEs
\&        \-l      List (MODULE is a pattern)
\&        \-r      Remove MODULE (stacks) or do autoclean
\&        \-q      Quiet
\&        \-v      Verbose
\&        \-s      Log to syslog
\&        \-D      Show dependencies
.Ve
.IP "\fBmore\fR" 4
.IX Item "more"
more [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.IP "\fBmount\fR" 4
.IX Item "mount"
mount [\s-1OPTIONS\s0] [\-o \s-1OPT\s0] \s-1DEVICE NODE\s0
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
.Vb 10
\&        \-a              Mount all filesystems in fstab
\&        \-f              Dry run
\&        \-i              Don\*(Aqt run mount helper
\&        \-v              Verbose
\&        \-r              Read\-only mount
\&        \-t FSTYPE[,...] Filesystem type(s)
\&        \-O OPT          Mount only filesystems with option OPT (\-a only)
\&\-o OPT:
\&        loop            Ignored (loop devices are autodetected)
\&        [a]sync         Writes are [a]synchronous
\&        [no]atime       Disable/enable updates to inode access times
\&        [no]diratime    Disable/enable atime updates to directories
\&        [no]relatime    Disable/enable atime updates relative to modification time
\&        [no]dev         (Dis)allow use of special device files
\&        [no]exec        (Dis)allow use of executable files
\&        [no]suid        (Dis)allow set\-user\-id\-root programs
\&        [r]shared       Convert [recursively] to a shared subtree
\&        [r]slave        Convert [recursively] to a slave subtree
\&        [r]private      Convert [recursively] to a private subtree
\&        [un]bindable    Make mount point [un]able to be bind mounted
\&        [r]bind         Bind a file or directory [recursively] to another location
\&        move            Relocate an existing mount point
\&        remount         Remount a mounted filesystem, changing flags
\&        ro              Same as \-r
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP "\fBmv\fR" 4
.IX Item "mv"
mv [\-fin] \s-1SOURCE DEST\s0
or: mv [\-fin] \s-1SOURCE... DIRECTORY\s0
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST,\s0 or move \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
.Vb 3
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
\&        \-n      Don\*(Aqt overwrite an existing file
.Ve
.IP "\fBnc\fR" 4
.IX Item "nc"
nc [\s-1IPADDR PORT\s0]
.Sp
Open a pipe to \s-1IP:PORT\s0
.IP "\fBnetstat\fR" 4
.IX Item "netstat"
netstat [\-ral] [\-tuwx] [\-enW]
.Sp
Display networking information
.Sp
.Vb 12
\&        \-r      Routing table
\&        \-a      All sockets
\&        \-l      Listening sockets
\&                Else: connected sockets
\&        \-t      TCP sockets
\&        \-u      UDP sockets
\&        \-w      Raw sockets
\&        \-x      Unix sockets
\&                Else: all socket types
\&        \-e      Other/more information
\&        \-n      Don\*(Aqt resolve names
\&        \-W      Wide display
.Ve
.IP "\fBnice\fR" 4
.IX Item "nice"
nice [\-n \s-1ADJUST\s0] [\s-1PROG ARGS\s0]
.Sp
Change scheduling priority, run \s-1PROG\s0
.Sp
.Vb 1
\&        \-n ADJUST       Adjust priority by ADJUST
.Ve
.IP "\fBnohup\fR" 4
.IX Item "nohup"
nohup \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 immune to hangups, with output to a non-tty
.IP "\fBnslookup\fR" 4
.IX Item "nslookup"
nslookup [\s-1HOST\s0] [\s-1SERVER\s0]
.Sp
Query the nameserver for the \s-1IP\s0 address of the given \s-1HOST\s0
optionally using a specified \s-1DNS\s0 server
.IP "\fBpidof\fR" 4
.IX Item "pidof"
pidof [\s-1NAME\s0]...
.Sp
List PIDs of all processes with names that match NAMEs
.IP "\fBping\fR" 4
.IX Item "ping"
ping [\s-1OPTIONS\s0] \s-1HOST\s0
.Sp
Send \s-1ICMP ECHO_REQUEST\s0 packets to network hosts
.Sp
.Vb 10
\&        \-4,\-6           Force IP or IPv6 name resolution
\&        \-c CNT          Send only CNT pings
\&        \-s SIZE         Send SIZE data bytes in packets (default:56)
\&        \-t TTL          Set TTL
\&        \-I IFACE/IP     Use interface or IP address as source
\&        \-M hint         Path MTU Discovery strategy [do|want|dont]
\&        \-W SEC          Seconds to wait for the first response (default:10)
\&                        (after all \-c CNT packets are sent)
\&        \-w SEC          Seconds until ping exits (default:infinite)
\&                        (can exit earlier with \-c CNT)
\&        \-q              Quiet, only display output at start
\&                        and when finished
\&        \-p              Pattern to use for payload
.Ve
.IP "\fBping6\fR" 4
.IX Item "ping6"
ping6 [\s-1OPTIONS\s0] \s-1HOST\s0
.Sp
Send \s-1ICMP ECHO_REQUEST\s0 packets to network hosts
.Sp
.Vb 7
\&        \-c CNT          Send only CNT pings
\&        \-s SIZE         Send SIZE data bytes in packets (default:56)
\&        \-I IFACE/IP     Use interface or IP address as source
\&        \-M hint         Path MTU Discovery strategy [do|want|dont]
\&        \-q              Quiet, only display output at start
\&                        and when finished
\&        \-p              Pattern to use for payload
.Ve
.IP "\fBpoweroff\fR" 4
.IX Item "poweroff"
poweroff [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Halt and shut off power
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBprintf\fR" 4
.IX Item "printf"
printf \s-1FORMAT\s0 [\s-1ARG\s0]...
.Sp
Format and print \s-1ARG\s0(s) according to \s-1FORMAT\s0 (a\-la C printf)
.IP "\fBps\fR" 4
.IX Item "ps"
ps
.Sp
Show list of processes
.Sp
.Vb 2
\&        w       Wide output
\&        T       Show threads
.Ve
.IP "\fBpwd\fR" 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP "\fBpwdx\fR" 4
.IX Item "pwdx"
pwdx \s-1PID...\s0
.Sp
Show current directory for PIDs
.IP "\fBreadlink\fR" 4
.IX Item "readlink"
readlink [\-fnv] \s-1FILE\s0
.Sp
Display the value of a symlink
.Sp
.Vb 3
\&        \-f      Canonicalize by following all symlinks
\&        \-n      Don\*(Aqt add newline
\&        \-v      Verbose
.Ve
.IP "\fBreboot\fR" 4
.IX Item "reboot"
reboot [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Reboot the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBremove-shell\fR" 4
.IX Item "remove-shell"
remove-shell \s-1SHELL...\s0
.Sp
Remove SHELLs from /etc/shells
.IP "\fBrenice\fR" 4
.IX Item "renice"
renice {{\-n \s-1INCREMENT\s0} | \s-1PRIORITY\s0} [[\-p | \-g | \-u] \s-1ID...\s0]
.Sp
Change scheduling priority for a running process
.Sp
.Vb 4
\&        \-n      Adjust current nice value (smaller is faster)
\&        \-p      Process id(s) (default)
\&        \-g      Process group id(s)
\&        \-u      Process user name(s) and/or id(s)
.Ve
.IP "\fBrm\fR" 4
.IX Item "rm"
rm [\-irf] \s-1FILE...\s0
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP "\fBrmdir\fR" 4
.IX Item "rmdir"
rmdir [\s-1OPTIONS\s0] \s-1DIRECTORY...\s0
.Sp
Remove \s-1DIRECTORY\s0 if it is empty
.Sp
.Vb 1
\&        \-p      Include parents
.Ve
.IP "\fBrmmod\fR" 4
.IX Item "rmmod"
rmmod [\-wfa] [\s-1MODULE\s0]...
.Sp
Unload kernel modules
.Sp
.Vb 3
\&        \-w      Wait until the module is no longer used
\&        \-f      Force unload
\&        \-a      Remove all unused modules (recursively)
.Ve
.IP "\fBroute\fR" 4
.IX Item "route"
route [{add|del|delete}]
.Sp
Edit kernel routing tables
.Sp
.Vb 3
\&        \-n      Don\*(Aqt resolve names
\&        \-e      Display other/more information
\&        \-A inet{6}      Select address family
.Ve
.IP "\fBsed\fR" 4
.IX Item "sed"
sed [\-inrE] [\-f \s-1FILE\s0]... [\-e \s-1CMD\s0]... [\s-1FILE\s0]...
or: sed [\-inrE] \s-1CMD\s0 [\s-1FILE\s0]...
.Sp
.Vb 6
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i[SFX] Edit files in\-place (otherwise sends to stdout)
\&                Optionally back files up, appending SFX
\&        \-n      Suppress automatic printing of pattern space
\&        \-r,\-E   Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP "\fBsetconsole\fR" 4
.IX Item "setconsole"
setconsole [\-r] [\s-1DEVICE\s0]
.Sp
Redirect system console output to \s-1DEVICE\s0 (default: /dev/tty)
.Sp
.Vb 1
\&        \-r      Reset output to /dev/console
.Ve
.IP "\fBsh\fR" 4
.IX Item "sh"
sh [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP "\fBsmemcap\fR" 4
.IX Item "smemcap"
smemcap >\s-1SMEMDATA.TAR\s0
.Sp
Collect memory usage data in /proc and write it to stdout
.IP "\fBsort\fR" 4
.IX Item "sort"
sort [\-nrugMcszbdfimSTokt] [\-o \s-1FILE\s0] [\-k start[.offset][opts][,end[.offset][opts]] [\-t \s-1CHAR\s0] [\s-1FILE\s0]...
.Sp
Sort lines of text
.Sp
.Vb 10
\&        \-b      Ignore leading blanks
\&        \-c      Check whether input is sorted
\&        \-d      Dictionary order (blank or alphanumeric only)
\&        \-f      Ignore case
\&        \-g      General numerical sort
\&        \-i      Ignore unprintable characters
\&        \-M      Sort month
\&        \-n      Sort numbers
\&        \-o      Output to file
\&        \-t CHAR Field separator
\&        \-k N[,M] Sort by Nth field
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      Lines are terminated by NUL, not newline
\&        \-mST    Ignored for GNU compatibility
.Ve
.IP "\fBsplit\fR" 4
.IX Item "split"
split [\s-1OPTIONS\s0] [\s-1INPUT\s0 [\s-1PREFIX\s0]]
.Sp
.Vb 3
\&        \-b N[k|m]       Split by N (kilo|mega)bytes
\&        \-l N            Split by N lines
\&        \-a N            Use N letters as suffix
.Ve
.IP "\fBstart-stop-daemon\fR" 4
.IX Item "start-stop-daemon"
start-stop-daemon [\s-1OPTIONS\s0] [\-S|\-K] ... [\-\- \s-1ARGS...\s0]
.Sp
Search for matching processes, and then
\&\-K: stop all matching processes.
\&\-S: start a process unless a matching process is found.
.Sp
Process matching:
.Sp
.Vb 10
\&        \-u,\-\-user USERNAME|UID  Match only this user\*(Aqs processes
\&        \-n,\-\-name NAME          Match processes with NAME
\&                                in comm field in /proc/PID/stat
\&        \-x,\-\-exec EXECUTABLE    Match processes with this command
\&                                in /proc/PID/{exe,cmdline}
\&        \-p,\-\-pidfile FILE       Match a process with PID from the file
\&        All specified conditions must match
\&\-S only:
\&        \-x,\-\-exec EXECUTABLE    Program to run
\&        \-a,\-\-startas NAME       Zeroth argument
\&        \-b,\-\-background         Background
\&        \-N,\-\-nicelevel N        Change nice level
\&        \-c,\-\-chuid USER[:[GRP]] Change to user/group
\&        \-m,\-\-make\-pidfile       Write PID to the pidfile specified by \-p
\&\-K only:
\&        \-s,\-\-signal SIG         Signal to send
\&        \-t,\-\-test               Match only, exit with 0 if a process is found
\&Other:
\&
\&        \-o,\-\-oknodo             Exit with status 0 if nothing is done
\&        \-v,\-\-verbose            Verbose
\&        \-q,\-\-quiet              Quiet
.Ve
.IP "\fBstrings\fR" 4
.IX Item "strings"
strings [\-afo] [\-n \s-1LEN\s0] [\s-1FILE\s0]...
.Sp
Display printable strings in a binary file
.Sp
.Vb 4
\&        \-a      Scan whole file (default)
\&        \-f      Precede strings with filenames
\&        \-n LEN  At least LEN characters form a string (default 4)
\&        \-o      Precede strings with decimal offsets
.Ve
.IP "\fBstty\fR" 4
.IX Item "stty"
stty [\-a|g] [\-F \s-1DEVICE\s0] [\s-1SETTING\s0]...
.Sp
Without arguments, prints baud rate, line discipline,
and deviations from stty sane
.Sp
.Vb 4
\&        \-F DEVICE       Open device instead of stdin
\&        \-a              Print all current settings in human\-readable form
\&        \-g              Print in stty\-readable form
\&        [SETTING]       See manpage
.Ve
.IP "\fBswapoff\fR" 4
.IX Item "swapoff"
swapoff [\-a] [\-e] [\s-1DEVICE\s0]
.Sp
Stop swapping on \s-1DEVICE\s0
.Sp
.Vb 2
\&        \-a      Stop swapping on all swap devices
\&        \-e      Silently skip devices that do not exist
.Ve
.IP "\fBswapon\fR" 4
.IX Item "swapon"
swapon [\-a] [\-e] [\s-1DEVICE\s0]
.Sp
Start swapping on \s-1DEVICE\s0
.Sp
.Vb 2
\&        \-a      Start swapping on all swap devices
\&        \-e      Silently skip devices that do not exist
.Ve
.IP "\fBsync\fR" 4
.IX Item "sync"
sync
.Sp
Write all buffered blocks to disk
.IP "\fBsyslogd\fR" 4
.IX Item "syslogd"
syslogd [\s-1OPTIONS\s0]
.Sp
System logging utility
.Sp
.Vb 10
\&        \-n              Run in foreground
\&        \-R HOST[:PORT]  Log to HOST:PORT (default PORT:514)
\&        \-L              Log locally and via network (default is network only if \-R)
\&        \-C[size_kb]     Log to shared mem buffer (use logread to read it)
\&        \-K              Log to kernel printk buffer (use dmesg to read it)
\&        \-O FILE         Log to FILE (default:/var/log/messages, stdout if \-)
\&        \-s SIZE         Max size (KB) before rotation (default:200KB, 0=off)
\&        \-b N            N rotated logs to keep (default:1, max=99, 0=purge)
\&        \-l N            Log only messages more urgent than prio N (1\-8)
\&        \-S              Smaller output
\&        \-H NAME         Use NAME as hostname
\&        \-D              Drop duplicates
\&        \-f FILE         Use FILE as config (default:/etc/syslog.conf)
.Ve
.IP "\fBtail\fR" 4
.IX Item "tail"
tail [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print last 10 lines of each \s-1FILE\s0 (or stdin) to stdout.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 8
\&        \-f              Print data as file grows
\&        \-c [+]N[kbm]    Print last N bytes
\&        \-n N[kbm]       Print last N lines
\&        \-n +N[kbm]      Start on Nth line and print the rest
\&        \-q              Never print headers
\&        \-s SECONDS      Wait SECONDS between reads with \-f
\&        \-v              Always print headers
\&        \-F              Same as \-f, but keep retrying
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
.IP "\fBtar\fR" 4
.IX Item "tar"
tar \-[cxtzjhvO] [\-X \s-1FILE\s0] [\-T \s-1FILE\s0] [\-f \s-1TARFILE\s0] [\-C \s-1DIR\s0] [\s-1FILE\s0]...
.Sp
Create, extract, or list files from a tar file
.Sp
Operation:
.Sp
.Vb 12
\&        c       Create
\&        x       Extract
\&        t       List
\&        f       Name of TARFILE (\*(Aq\-\*(Aq for stdin/out)
\&        C       Change to DIR before operation
\&        v       Verbose
\&        z       (De)compress using gzip
\&        j       (De)compress using bzip2
\&        O       Extract to stdout
\&        h       Follow symlinks
\&        X       File with names to exclude
\&        T       File with names to include
.Ve
.IP "\fBtaskset\fR" 4
.IX Item "taskset"
taskset [\-p] [\s-1MASK\s0] [\s-1PID\s0 | \s-1PROG ARGS\s0]
.Sp
Set or get \s-1CPU\s0 affinity
.Sp
.Vb 1
\&        \-p      Operate on an existing PID
.Ve
.IP "\fBtelnetd\fR" 4
.IX Item "telnetd"
telnetd [\s-1OPTIONS\s0]
.Sp
Handle incoming telnet connections
.Sp
.Vb 8
\&        \-l LOGIN        Exec LOGIN on connect
\&        \-f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        \-K              Close connection as soon as login exits
\&                        (normally wait until all programs close slave pty)
\&        \-p PORT         Port to listen on
\&        \-b ADDR[:PORT]  Address to bind to
\&        \-F              Run in foreground
\&        \-i              Inetd mode
.Ve
.IP "\fBtftp\fR" 4
.IX Item "tftp"
tftp [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1PORT\s0]
.Sp
Transfer a file from/to tftp server
.Sp
.Vb 4
\&        \-l FILE Local FILE
\&        \-r FILE Remote FILE
\&        \-g      Get file
\&        \-p      Put file
.Ve
.IP "\fBtftpd\fR" 4
.IX Item "tftpd"
tftpd [\-cr] [\-u \s-1USER\s0] [\s-1DIR\s0]
.Sp
Transfer a file on tftp client's request
.Sp
tftpd should be used as an inetd service.
tftpd's line for inetd.conf:
	69 dgram udp nowait root tftpd tftpd \-l /files/to/serve
It also can be ran from udpsvd:
.Sp
.Vb 1
\&        udpsvd \-vE 0.0.0.0 69 tftpd /files/to/serve
\&
\&        \-r      Prohibit upload
\&        \-c      Allow file creation via upload
\&        \-u      Access files as USER
\&        \-l      Log to syslog (inetd mode requires this)
.Ve
.IP "\fBtop\fR" 4
.IX Item "top"
top [\-b] [\-nCOUNT] [\-dSECONDS] [\-m]
.Sp
Provide a view of process activity in real time.
Read the status of all processes from /proc each \s-1SECONDS\s0
and display a screenful of them.
Keys:
.Sp
.Vb 5
\&        N/M/P/T: show CPU usage, sort by pid/mem/cpu/time
\&        S: show memory
\&        R: reverse sort
\&        H: toggle threads, 1: toggle SMP
\&        Q,^C: exit
.Ve
.Sp
Options:
.Sp
.Vb 4
\&        \-b      Batch mode
\&        \-n N    Exit after N iterations
\&        \-d N    Delay between updates
\&        \-m      Same as \*(Aqs\*(Aq key
.Ve
.IP "\fBtouch\fR" 4
.IX Item "touch"
touch [\-c] \s-1FILE...\s0
.Sp
Update the last-modified date on the given FILE[s]
.Sp
.Vb 1
\&        \-c      Don\*(Aqt create files
.Ve
.IP "\fBtr\fR" 4
.IX Item "tr"
tr [\-cds] \s-1STRING1\s0 [\s-1STRING2\s0]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
.Vb 3
\&        \-c      Take complement of STRING1
\&        \-d      Delete input characters coded STRING1
\&        \-s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP "\fBtraceroute\fR" 4
.IX Item "traceroute"
traceroute [\-46FIlnrv] [\-f 1ST_TTL] [\-m \s-1MAXTTL\s0] [\-q \s-1PROBES\s0] [\-p \s-1PORT\s0]
	[\-t \s-1TOS\s0] [\-w \s-1WAIT_SEC\s0] [\-g \s-1GATEWAY\s0] [\-s \s-1SRC_IP\s0] [\-i \s-1IFACE\s0]
	[\-z \s-1PAUSE_MSEC\s0] \s-1HOST\s0 [\s-1BYTES\s0]
.Sp
Trace the route to \s-1HOST\s0
.Sp
.Vb 10
\&        \-4,\-6   Force IP or IPv6 name resolution
\&        \-F      Set don\*(Aqt fragment bit
\&        \-I      Use ICMP ECHO instead of UDP datagrams
\&        \-l      Display TTL value of the returned packet
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-v      Verbose
\&        \-f N    First number of hops (default 1)
\&        \-m N    Max number of hops
\&        \-q N    Number of probes per hop (default 3)
\&        \-p N    Base UDP port number used in probes
\&                (default 33434)
\&        \-s IP   Source address
\&        \-i IFACE Source interface
\&        \-t N    Type\-of\-service in probe packets (default 0)
\&        \-w SEC  Time to wait for a response (default 3)
\&        \-g IP   Loose source route gateway (8 max)
.Ve
.IP "\fBtraceroute6\fR" 4
.IX Item "traceroute6"
traceroute6 [\-nrv] [\-m \s-1MAXTTL\s0] [\-q \s-1PROBES\s0] [\-p \s-1PORT\s0]
	[\-t \s-1TOS\s0] [\-w \s-1WAIT_SEC\s0] [\-s \s-1SRC_IP\s0] [\-i \s-1IFACE\s0]
	\s-1HOST\s0 [\s-1BYTES\s0]
.Sp
Trace the route to \s-1HOST\s0
.Sp
.Vb 11
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-v      Verbose
\&        \-m N    Max number of hops
\&        \-q N    Number of probes per hop (default 3)
\&        \-p N    Base UDP port number used in probes
\&                (default 33434)
\&        \-s IP   Source address
\&        \-i IFACE Source interface
\&        \-t N    Type\-of\-service in probe packets (default 0)
\&        \-w SEC  Time wait for a response (default 3)
.Ve
.IP "\fBtty\fR" 4
.IX Item "tty"
tty
.Sp
Print file name of stdin's terminal
.IP "\fBudhcpc\fR" 4
.IX Item "udhcpc"
udhcpc [\-fbqRB] [\-a[\s-1MSEC\s0]] [\-t N] [\-T \s-1SEC\s0] [\-A SEC/\-n]
	[\-i \s-1IFACE\s0] [\-s \s-1PROG\s0] [\-p \s-1PIDFILE\s0]
	[\-oC] [\-r \s-1IP\s0] [\-V \s-1VENDOR\s0] [\-F \s-1NAME\s0] [\-x \s-1OPT:VAL\s0]... [\-O \s-1OPT\s0]...
.Sp
.Vb 10
\&        \-i,\-\-interface IFACE    Interface to use (default eth0)
\&        \-s,\-\-script PROG        Run PROG at DHCP events (default /tmp/udhcpc)
\&        \-p,\-\-pidfile FILE       Create pidfile
\&        \-B,\-\-broadcast          Request broadcast replies
\&        \-t,\-\-retries N          Send up to N discover packets (default 3)
\&        \-T,\-\-timeout SEC        Pause between packets (default 3)
\&        \-A,\-\-tryagain SEC       Wait if lease is not obtained (default 20)
\&        \-n,\-\-now                Exit if lease is not obtained
\&        \-q,\-\-quit               Exit after obtaining lease
\&        \-R,\-\-release            Release IP on exit
\&        \-f,\-\-foreground         Run in foreground
\&        \-b,\-\-background         Background if lease is not obtained
\&        \-S,\-\-syslog             Log to syslog too
\&        \-a[MSEC],\-\-arping[=MSEC] Validate offered address with ARP ping
\&        \-r,\-\-request IP         Request this IP address
\&        \-o,\-\-no\-default\-options Don\*(Aqt request any options (unless \-O is given)
\&        \-O,\-\-request\-option OPT Request option OPT from server (cumulative)
\&        \-x OPT:VAL              Include option OPT in sent packets (cumulative)
\&                                Examples of string, numeric, and hex byte opts:
\&                                \-x hostname:bbox \- option 12
\&                                \-x lease:3600 \- option 51 (lease time)
\&                                \-x 0x3d:0100BEEFC0FFEE \- option 61 (client id)
\&        \-F,\-\-fqdn NAME          Ask server to update DNS mapping for NAME
\&        \-V,\-\-vendorclass VENDOR Vendor identifier (default \*(Aqudhcp VERSION\*(Aq)
\&        \-C,\-\-clientid\-none      Don\*(Aqt send MAC as client identifier
\&Signals:
\&
\&        USR1    Renew lease
\&        USR2    Release lease
.Ve
.IP "\fBumount\fR" 4
.IX Item "umount"
umount [\s-1OPTIONS\s0] FILESYSTEM|DIRECTORY
.Sp
Unmount file systems
.Sp
.Vb 5
\&        \-a      Unmount all file systems
\&        \-r      Try to remount devices as read\-only if mount is busy
\&        \-l      Lazy umount (detach filesystem)
\&        \-f      Force umount (i.e., unreachable NFS server)
\&        \-D      Don\*(Aqt free loop device even if it has been used
.Ve
.IP "\fBuname\fR" 4
.IX Item "uname"
uname [\-amnrspvio]
.Sp
Print system information
.Sp
.Vb 9
\&        \-a      Print all
\&        \-m      The machine (hardware) type
\&        \-n      Hostname
\&        \-r      Kernel release
\&        \-s      Kernel name (default)
\&        \-p      Processor type
\&        \-v      Kernel version
\&        \-i      The hardware platform
\&        \-o      OS name
.Ve
.IP "\fBuniq\fR" 4
.IX Item "uniq"
uniq [\-cdu][\-f,s,w N] [\s-1INPUT\s0 [\s-1OUTPUT\s0]]
.Sp
Discard duplicate lines
.Sp
.Vb 6
\&        \-c      Prefix lines by the number of occurrences
\&        \-d      Only print duplicate lines
\&        \-u      Only print unique lines
\&        \-f N    Skip first N fields
\&        \-s N    Skip first N chars (after any skipped fields)
\&        \-w N    Compare N characters in line
.Ve
.IP "\fBunzip\fR" 4
.IX Item "unzip"
unzip [\-lnopq] FILE[.zip] [\s-1FILE\s0]... [\-x \s-1FILE...\s0] [\-d \s-1DIR\s0]
.Sp
Extract FILEs from \s-1ZIP\s0 archive
.Sp
.Vb 7
\&        \-l      List contents (with \-q for short form)
\&        \-n      Never overwrite files (default: ask)
\&        \-o      Overwrite
\&        \-p      Print to stdout
\&        \-q      Quiet
\&        \-x FILE Exclude FILEs
\&        \-d DIR  Extract into DIR
.Ve
.IP "\fBuptime\fR" 4
.IX Item "uptime"
uptime
.Sp
Display the time since the last boot
.IP "\fBusleep\fR" 4
.IX Item "usleep"
usleep N
.Sp
Pause for N microseconds
.IP "\fBvconfig\fR" 4
.IX Item "vconfig"
vconfig \s-1COMMAND\s0 [\s-1OPTIONS\s0]
.Sp
Create and remove virtual ethernet devices
.Sp
.Vb 6
\&        add             IFACE VLAN_ID
\&        rem             VLAN_NAME
\&        set_flag        IFACE 0|1 VLAN_QOS
\&        set_egress_map  VLAN_NAME SKB_PRIO VLAN_QOS
\&        set_ingress_map VLAN_NAME SKB_PRIO VLAN_QOS
\&        set_name_type   NAME_TYPE
.Ve
.IP "\fBvi\fR" 4
.IX Item "vi"
vi [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Edit \s-1FILE\s0
.Sp
.Vb 3
\&        \-c CMD  Initial command to run ($EXINIT also available)
\&        \-R      Read\-only
\&        \-H      List available features
.Ve
.IP "\fBwatch\fR" 4
.IX Item "watch"
watch [\-n \s-1SEC\s0] [\-t] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 periodically
.Sp
.Vb 2
\&        \-n      Loop period in seconds (default 2)
\&        \-t      Don\*(Aqt print header
.Ve
.IP "\fBwc\fR" 4
.IX Item "wc"
wc [\-cmlwL] [\s-1FILE\s0]...
.Sp
Count lines, words, and bytes for each \s-1FILE\s0 (or stdin)
.Sp
.Vb 5
\&        \-c      Count bytes
\&        \-m      Count characters
\&        \-l      Count newlines
\&        \-w      Count words
\&        \-L      Print longest line length
.Ve
.IP "\fBwhich\fR" 4
.IX Item "which"
which [\s-1COMMAND\s0]...
.Sp
Locate a \s-1COMMAND\s0
.IP "\fBxargs\fR" 4
.IX Item "xargs"
xargs [\s-1OPTIONS\s0] [\s-1PROG ARGS\s0]
.Sp
Run \s-1PROG\s0 on every item given by stdin
.Sp
.Vb 9
\&        \-p      Ask user whether to run each command
\&        \-r      Don\*(Aqt run command if input is empty
\&        \-0      Input is separated by NUL characters
\&        \-t      Print the command on stderr before execution
\&        \-e[STR] STR stops input processing
\&        \-n N    Pass no more than N args to PROG
\&        \-s N    Pass command line of no more than N bytes
\&        \-I STR  Replace STR within PROG ARGS with input line
\&        \-x      Exit if size is exceeded
.Ve
.IP "\fBzcat\fR" 4
.IX Item "zcat"
zcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.IP "\fBzcip\fR" 4
.IX Item "zcip"
zcip [\s-1OPTIONS\s0] \s-1IFACE SCRIPT\s0
.Sp
Manage a ZeroConf IPv4 link-local address
.Sp
.Vb 6
\&        \-f              Run in foreground
\&        \-q              Quit after obtaining address
\&        \-r 169.254.x.x  Request this address first
\&        \-l x.x.0.0      Use this range instead of 169.254
\&        \-p FILE         Create pidfile
\&        \-v              Verbose
.Ve
.Sp
\&\f(CW$LOGGING\fR=none		Suppress logging
\&\f(CW$LOGGING\fR=syslog 	Log to syslog
.Sp
With no \-q, runs continuously monitoring for \s-1ARP\s0 conflicts,
exits only on I/O errors (link down etc)
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS.\s0  Some applets however, such as login and su, will use libc functions
that require \s-1NSS.\s0
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP,\s0 BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS.\s0  This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve
