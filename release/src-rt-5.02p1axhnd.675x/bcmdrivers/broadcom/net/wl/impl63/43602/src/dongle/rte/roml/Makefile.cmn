#
# Makefile for standalone programs based on hndrte
#
# Copyright 2020 Broadcom
#
# This program is the proprietary software of Broadcom and/or
# its licensors, and may only be used, duplicated, modified or distributed
# pursuant to the terms and conditions of a separate, written license
# agreement executed between you and Broadcom (an "Authorized License").
# Except as set forth in an Authorized License, Broadcom grants no license
# (express or implied), right to use, or waiver of any kind with respect to
# the Software, and Broadcom expressly reserves all rights in and to the
# Software and all intellectual property rights therein.  IF YOU HAVE NO
# AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY
# WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF
# THE SOFTWARE.
#
# Except as expressly set forth in the Authorized License,
#
# 1. This program, including its structure, sequence and organization,
# constitutes the valuable trade secrets of Broadcom, and you shall use
# all reasonable efforts to protect the confidentiality thereof, and to
# use this information only in connection with your use of Broadcom
# integrated circuit products.
#
# 2. TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
# "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
# REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR
# OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
# DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
# NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
# ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
# CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
# OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
#
# 3. TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
# BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL,
# SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR
# IN ANY WAY RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN
# IF BROADCOM HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii)
# ANY AMOUNT IN EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF
# OR U.S. $1, WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY
# NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
#
# $Id$
#

# run silently by default
V ?= 0
ifeq ($(V),0)
ifeq ($(filter -s,$(MAKEFLAGS)),)
MAKEFLAGS += -s
endif
endif	# V

PROGRAM	:= roml

WLAN_ComponentsInUse := bcmwifi clm lwip ppr rel_mcast gas encode olpc proxd
include $(SRCBASE)/makefiles/WLAN_Common.mk

RTEDIR    ?= $(SRCBASE)/dongle/rte
WLMKDIR   ?= $(RTEDIR)/wl
WLSUBDIR  ?= romlsym

ifeq ($(ROMLSYMBLDDIR),)
WLBLDDIR := $(WLMKDIR)/$(WLSUBDIR)
else
WLBLDDIR := $(ROMLSYMBLDDIR)
endif

ifndef CHIP
$(error CHIP is not defined)
endif

ROMCHKVALSCRIPT := $(SRCBASE)/dongle/rte/check-value-types

# include the base config first
BCM_ROM_AUTO_IOCTL_PATCH := 1

ROMLIB	:= 1
ifdef ROMTBL_CFG
CHIP_ID := $(CHIP)
$(if $(wildcard $(WLMKDIR)/$(WLSUBDIR)/$(ROMTBL_CFG).mk),\
,\
$(error $(WLMKDIR)/$(WLSUBDIR)/$(ROMTBL_CFG).mk does not exist))
include $(WLMKDIR)/$(WLSUBDIR)/$(ROMTBL_CFG).mk
ifneq ($(CHIP_ID),$(CHIP))
#$(info restore CHIP := $(CHIP_ID) [changed to $(CHIP) in $(WLMKDIR)/$(WLSUBDIR)/$(ROMTBL_CFG).mk])
CHIP := $(CHIP_ID)
endif
# reset some of the configs
# This is CRC over runtime image during download
# ROM library does not need this
CRC32BIN	:= 0
# This is on by default in the brand; disable it
GENROMTBL	:= 0
ROMMFG		:= 1
endif		# ROMTBL_CFG
# include subdir common config
ifneq ($(wildcard $(WLMKDIR)/$(WLSUBDIR)/rules.cmn),)
include $(WLMKDIR)/$(WLSUBDIR)/rules.cmn
endif

# variables validations
ifeq ($(PREPEND_BINARY),1)
ifndef ROMSIZE
$(error ROMSIZE is not defined)
endif
ifndef ROMBANKSIZE
$(error ROMBANKSIZE is not defined)
endif
ifneq ($(TARGET_CPU),cr4)
ifndef ROMADDR_LOW
$(error ROMADDR_LOW is not defined)
endif
ifndef ROMADDR_DELTA
$(error ROMADDR_DELTA is not defined)
endif
endif
ifndef PBEXE
$(error PBEXE is not defined)
endif
ifndef PBBIN
$(error PBBIN is not defined)
endif
ifndef PBQT
$(error PBQT is not defined)
endif
$(if $(wildcard $(PBBIN)),,$(error file $(PBBIN) does not exist))
ifdef PREPEND_BINARY2
ifndef PB2EXE
$(error PB2EXE is not defined)
endif
ifndef PB2BIN
$(error PB2BIN is not defined)
endif
$(if $(wildcard $(PB2BIN)),,$(error file $(PB2BIN) does not exist))
endif	# PREPEND_BINARY2
ifndef ROMPFX
$(error ROMPFX is not defined)
endif
endif	# PREPEND_BINARY

ifeq ($(PREPEND_BINARY),1)
PBNAME	:= $(notdir $(PBBIN))
endif
ifdef PREPEND_BINARY2
PB2NAME	:= $(notdir $(PB2BIN))
endif

# include RTE files
include $(RTEDIR)/Makeconf

# include WL files
ifdef WLCONFFILE
WLCFGDIR := $(SRCBASE)/wl/config
# include wl conf
$(if $(wildcard $(WLCFGDIR)/$(WLCONFFILE)),\
,\
$(error $(WLCFGDIR)/$(WLCONFFILE) does not exist))
include $(WLCFGDIR)/$(WLCONFFILE)
# include wl.mk
include $(WLCFGDIR)/wl.mk
ifeq ($(WLFILES),)
$(error WLFILES is undefined)
endif
OBJECTS		+= $(WLFILES:.c=.o)
EXTRA_DFLAGS	+= $(WLFLAGS)
endif

vpath %.c	$(RTEDIR)/roml $(WLAN_StdSrcDirsA) $(WLAN_ComponentSrcDirs)

EXTRA_DFLAGS	+= -DBCMROMBUILD

ifneq ($(JMPTBL_FULL)$(JMPTBL_TCAM),)
# ROM escape list
ROMESC		:= romesc.txt
ROMCTL		:= romctl.txt
# Objects to exclude from romctl.txt
OBJECTS_EXCLUDE ?= $(shell grep -e ^[^\#].*exclude_file $(ROMCTL) | \
			sed -e "s/\\s\+exclude_file/ /g" -e "s/\#.*$$//g")
OBJECTS	:= $(filter-out $(OBJECTS_EXCLUDE),$(OBJECTS))
endif

# make targets
OPT		:= $(PROGRAM).opt
EXE		:= $(PROGRAM).exe
BIN		:= $(PROGRAM).bin
DIS		:= $(PROGRAM).dis
MAP		:= $(PROGRAM).map
QT		:= $(PROGRAM).qt
CHK		:= $(PROGRAM).chk
LOGSTRS		:= $(PROGRAM).logstrs

IMAGES		= $(OPT) $(EXE) $(BIN) $(DIS) $(MAP) $(QT) $(CHK) $(LOGSTRS)

ROMDASM ?= 1

ifeq ($(ROMDASM),1)
IMAGES		+= romtable.md5sign
IMAGES		+= romtable_ioctl.md5sign
IMAGES		+= $(ROMSYMDEPS)
ifeq ($(ROMDIFF),1)
IMAGES		+= romdiff-stats.log
endif
endif

ifeq ($(JMPTBL_TCAM),1)
IMAGES += $(ROML_PATCH_PREAMBLE_SRC)
endif

# include common rules after all configuration is setup
include $(RTEDIR)/Makerules

ROMSPLIT	:= $(SRCBASE)/tools/misc/qtmem_split.pl
BCMQTCAT	:= $(SRCBASE)/tools/misc/qtmem_cat.pl
BCMCF2QT	:= $(SRCBASE)/tools/misc/codefile2qt.pl
BCMSREC2MEM	:= $(SRCBASE)/tools/misc/srec2mem.pl

PERL_64BIT := $(shell perl --version | grep _64)

# primary build target
all: $(IMAGES) $(RAMFNSTUBSYM) \
     $(if $(JMPTBL_FULL),$(ROMFNJMPSRC) $(ROMFNJMPHDR)) \
     $(if $(ROMSIZE),showsize checksize) \
     $(EXTERN_TARGETS)
ifeq ($(PREPEND_BINARY),1)
	@echo "Generating combined ROM image"
ifeq ($(TARGET_CPU),cr4)
	@$(OBJCOPY) -O srec --srec-forceS3 \
		-R .reginfo -R .note -R .comment -R .mdebug -S \
		$(PBEXE) $(PBNAME).srec
else
	@$(OBJCOPY) -O srec --srec-forceS3 --change-addresses -$(ROMADDR_DELTA) \
		-R .reginfo -R .note -R .comment -R .mdebug  -R .logstrs -R .lognums -S \
		$(PBEXE) $(PBNAME).srec
endif
	@echo "------------------$(PBNAME).srec-------------------"
	@srec_info $(PBNAME).srec
ifeq ($(PREPEND_BINARY2),1)
	@$(OBJCOPYSREC) $(PB2EXE) $(PB2NAME).srec
	@echo "------------------$(PB2NAME).srec-------------------"
	@srec_info $(PB2NAME).srec
endif
	@$(OBJCOPYSREC) $(EXE) $(PROGRAM).srec
	@echo "------------------$(PROGRAM).srec-----------------------"
	@srec_info $(PROGRAM).srec
	@srec_cat $(PBNAME).srec -Motorola \
	        $(if $(PREPEND_BINARY2),$(PB2NAME).srec -Motorola)  \
		$(PROGRAM).srec -Motorola \
		-Output $(ROMPFX).srec -Motorola --address-length=4
	@echo "---------$(ROMPFX).srec-------------"
	@srec_info $(ROMPFX).srec
	@echo "--------------------------------------------------"
ifeq ($(MEM_WIDTH),4)
	@srec2mem $(ROMPFX).srec 32
else
	@perl $(BCMSREC2MEM) $(ROMPFX).srec
endif
	perl  $(SRCBASE)/tools/misc/hnd_hex2bin.pl \
		$(ROMPFX).mem -rom_size $(ROMSIZE) -rom_bank_size $(ROMBANKSIZE) \
		-width $(MEM_WIDTH) -fn_lead_zero 2 -convert_2_little
	@( \
	roml_size="`stat -c %s $(BIN)`"; \
	pb_size="`stat -c %s $(PBBIN)`"; \
	$(if $(PREPEND_BINARY2),pb2_size="`stat -c %s $(PB2BIN)`";) \
	romimage_size=$$(($$roml_size + $$pb_size $(if $(PREPEND_BINARY2), + $$pb2_size))); \
	remaining=$$(($(ROMSIZE)-$$romimage_size)); \
	echo "$(notdir $(PBBIN)): $$pb_size;$(if $(PREPEND_BINARY2), $(PB2BIN): $$pb2_size; ) ROM library: $$roml_size "; \
	echo "Combined size: $$romimage_size; limit: $(strip $(ROMSIZE)) \
	     remaining: $$remaining"; \
	if [ "$$NOMAXSIZE" != "1" -a -z "$(ROMDIFF)" -a "$$remaining" -lt 0 ]; then \
		echo >&2 "ROM size exceeded"; \
		exit 101; \
	fi; \
	)
	@echo "Creating combined QT image"
ifdef ROMADDR_LOW
	$(BCMQTCAT) -baseaddr $(ROMADDR_LOW)  $(PBQT) $(if $(PREPEND_BINARY2),$(PB2QT)) $(QT) > $(ROMPFX).qt
else
	$(BCMQTCAT) -width $(MEM_WIDTH) $(PBQT) $(if $(PREPEND_BINARY2),$(PB2QT)) $(QT) > $(ROMPFX).qt
endif
	@echo "Creating combined ROM image"
	$(ROMSPLIT) -input $(ROMPFX).qt -banksize $(ROMBANKSIZE) -qtfilepfx $(QTFILEPFX) $(QTEXTRAOPTIONS)
else  # PREPEND_BINARY = 0
	@echo "Generating ROM image"
	@$(OBJCOPYSREC) $(EXE) $(PROGRAM).srec
	@echo "------------------$(PROGRAM).srec-----------------------"
	@srec_info $(PROGRAM).srec
	@cp $(PROGRAM).srec $(ROMPFX).srec
	@srec_cat $(PROGRAM).srec -Motorola \
		-Output $(ROMPFX).srec -Motorola --address-length=4
	@echo "--------------------------------------------------"
ifeq ($(MEM_WIDTH),4)
	@srec2mem $(ROMPFX).srec 32
else
	@perl $(BCMSREC2MEM) $(ROMPFX).srec
endif
	perl  $(SRCBASE)/tools/misc/hnd_hex2bin.pl \
		$(ROMPFX).mem -rom_size $(ROMSIZE) -rom_bank_size $(ROMBANKSIZE) \
		-width $(MEM_WIDTH) -fn_lead_zero 2 -convert_2_little
	@( \
	roml_size="`stat -c %s $(BIN)`"; \
	romimage_size=$$(($$roml_size)); \
	remaining=$$(($(ROMSIZE)-$$romimage_size)); \
	echo "ROM library: $$roml_size "; \
	echo "Total size: $$romimage_size; limit: $(strip $(ROMSIZE)) \
	     remaining: $$remaining"; \
	if [ "$$NOMAXSIZE" != "1" -a -z "$(ROMDIFF)" -a "$$remaining" -lt 0 ]; then \
		echo >&2 "ROM size exceeded"; \
		exit 101; \
	fi; \
	)
	@echo "Splitting QT ROM image $(QT), assuming $(ROMBANKSIZE) bytes per mem bank"
	$(ROMSPLIT) -input $(QT) -banksize $(ROMBANKSIZE) -qtfilepfx $(QTFILEPFX) $(QTEXTRAOPTIONS)
endif	# PREPEND_BINARY

# generate full romtable.S file
ifeq ($(ROMTBL_CFG),)
$(error ROMTBL_CFG is not defined)
endif

CLEAN := $(if $(ROMTBL_VARIANT),$(ROMTBL_VARIANT)/)clean
BUILD := $(if $(ROMTBL_VARIANT),$(ROMTBL_VARIANT)/)romtable_full.S

.PHONY: romtable_full
romtable_full: romtable.S

romtable.S: $(WLBLDDIR)/$(ROMTBL_CFG)/$(BUILD)
ifeq ($(wildcard $@),)
	cp $< $@
else
	$(if $(shell diff $< $@),cp $< $@)
endif

$(WLBLDDIR)/$(ROMTBL_CFG)/$(BUILD): FORCE
	$(MAKE) -C $(WLMKDIR) DEVSIM_BUILD=$(DEVSIM_BUILD) $(WLSUBDIR)/$(ROMTBL_CFG)/$(BUILD)

# codefiles (in 01010101 format) are used by the RTL team to generate ROM content. .qt files
# (in e.g. 00000000    0300EA41BF00BF00 format) are used by the software team to verify the ROM on
# the Palladium Quickturn simulator. To make sure that the simulated ROM in QT corresponds to the
# bits that will be shipped to the RTL team, a check is performed.
.PHONY: verify_codefile
verify_codefile: $(ROMPFX)_00*.codefile $(QTFILEPFX)0.hex.qt
	$(if $(ROMADDR_QT),,$(error ROMADDR_QT is not defined))
	@(\
		j=0; \
		for i in $(ROMPFX)*.codefile; do\
			perl $(BCMCF2QT) -maxaddr $(ROMADDR_QT) < \
				$$i > .tmp.$$i; \
			echo "diffing $(QTFILEPFX)$$j.hex.qt against .tmp.$$i"; \
			differr=`diff -i -q $(QTFILEPFX)$$j.hex.qt .tmp.$$i`; \
			if [ "$$differr" == "Files $(QTFILEPFX)$$j.hex.qt and .tmp.$$i differ" ]; then \
				echo $$differr; \
				exit 12; \
			fi; \
			j=`expr $$j + 1`; \
			rm .tmp.$$i; \
		done; \
		)

# create check_value file
.PHONY: check_value
check_value: $(CHK)
%.chk: %.exe
	perl $(ROMCHKVALSCRIPT) $< > $@

.PHONY: clean
clean:
	-@rm -rf *.mem *.srec *.qt *.codefile \
		romtable.xref romtable.md5sign *.nopt \
		romdobjs.tgz romdasm romdasm-base *.log $(ROMESC) min_$(ROMESC) hash_$(ROMESC) \
		wlc_clm_data.* $(ROMLSIGN_IOCTL)

%.logstrs: %.exe
	$(OBJCOPY) --set-section-flags .romlogstrs=load --set-section-flags .romlognums=load -j .romlogstrs -j .romlognums $< $@

# Tell emacs to use Makefile mode since it does not know from the filename:
#       Local Variables:
#       mode: makefile
#       End:
